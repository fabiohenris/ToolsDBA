# Fala galera, criei esse shell para ajudar , quem tiver o mesmo problema que eu
# Que √© levantar os historicos das instancias SQL, saber a chave que foi utilizada (principal) e outras informa√ß√µes . 
# Como essa √© a primeira vers√£o , aos poucos irei icrementar mais informa√ß√µes para serem apresentadas. 

# Desenvolvido : Fabio Henrique da Silva
# LInkdien: https://www.linkedin.com/in/fabio-henriques/

# Verifica e instala m√≥dulo SqlServer
if (-not (Get-Module -ListAvailable -Name SqlServer)) {
    Write-Host "üì¶ M√≥dulo 'SqlServer' n√£o encontrado. Instalando..."
    try {
        Install-Module -Name SqlServer -Force -Scope CurrentUser -ErrorAction Stop -AllowClobber
        Write-Host "‚úÖ M√≥dulo 'SqlServer' instalado com sucesso."
    } catch {
        Write-Host "‚ùå Falha ao instalar o m√≥dulo 'SqlServer': $($_.Exception.Message)"
        return
    }
}

try {
    Import-Module SqlServer -ErrorAction Stop
    Write-Host "üì• M√≥dulo 'SqlServer' carregado com sucesso.`n"
} catch {
    Write-Host "‚ùå Erro ao importar o m√≥dulo 'SqlServer': $($_.Exception.Message)"
    return
}

function GetSqlServerProductKey {
    param ([string]$InstanceName)

    $localmachine = [Microsoft.Win32.RegistryHive]::LocalMachine
    $defaultview  = [Microsoft.Win32.RegistryView]::Default
    $reg           = [Microsoft.Win32.RegistryKey]::OpenBaseKey($localmachine, $defaultview)

    $key = "SOFTWARE\\Microsoft\\Microsoft SQL Server\\$InstanceName\\Setup"
    try {
        $encodedData = $reg.OpenSubKey($key).GetValue("DigitalProductID")
        $reg.Close()

        if (-not $encodedData) {
            Write-Host "‚ùå DigitalProductID n√£o encontrada para a inst√¢ncia: $InstanceName"
            return
        }

        $binArray    = $encodedData[0..66]
        $charsArray  = "B","C","D","F","G","H","J","K","M","P","Q","R","T","V","W","X","Y","2","3","4","6","7","8","9"
        $productKey  = ""

        for ($i = 24; $i -ge 0; $i--) {
            $k = 0
            for ($j = 14; $j -ge 0; $j--) {
                $k = $k * 256 -bxor $binArray[$j]
                $binArray[$j] = [math]::truncate($k / 24)
                $k = $k % 24
            }
            $productKey = $charsArray[$k] + $productKey
            if (($i % 5 -eq 0) -and ($i -ne 0)) {
                $productKey = "-" + $productKey
            }
        }

        Write-Host "üîë Chave do Produto: $productKey"
    } catch {
        Write-Host "‚ö†Ô∏è Erro ao acessar o registro ou processar a chave para $InstanceName"
    }
}

function Get-AllSQLServerInfo {
    Write-Host "üîç Iniciando varredura de inst√¢ncias SQL Server instaladas...`n"

    $instances = Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server' |
                 Select-Object -ExpandProperty InstalledInstances

    if (-not $instances) {
        Write-Host "‚ùå Nenhuma inst√¢ncia SQL Server encontrada neste servidor."
        return
    }

    foreach ($instance in $instances) {
        $instanceName = if ($instance -eq "MSSQLSERVER") { "localhost" } else { "localhost\$instance" }
        Write-Host "`n==============================="
        Write-Host "üìå Inst√¢ncia: $instanceName"
        Write-Host "==============================="

        $query = @"
SELECT
    SERVERPROPERTY('MachineName')            AS MachineName,
    SERVERPROPERTY('ServerName')             AS ServerName,
    SERVERPROPERTY('InstanceName')           AS InstanceName,
    SERVERPROPERTY('Edition')                AS Edition,
    SERVERPROPERTY('ProductVersion')         AS ProductVersion,
    SERVERPROPERTY('ProductLevel')           AS ProductLevel,
    SERVERPROPERTY('IsIntegratedSecurityOnly') AS IsIntegratedSecurityOnly
"@

        try {
            $result = Invoke-Sqlcmd `
                -ServerInstance         $instanceName `
                -Query                  $query `
                -TrustServerCertificate `
                -ErrorAction            Stop

            $result | Format-List
        } catch {
            Write-Host ("‚ùå Erro ao conectar √† inst√¢ncia {0}: {1}" -f $instanceName, $_.Exception.Message)
            continue
        }

        # Registro de instala√ß√£o
        $setupKeyPath = "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\$instance\Setup"
        if (Test-Path $setupKeyPath) {
            $regInfo = Get-ItemProperty -Path $setupKeyPath
            Write-Host "üìÅ Caminho de Instala√ß√£o: $($regInfo.SQLPath)"
            Write-Host "üìÖ Data de Instala√ß√£o : $($regInfo.InstallDate)"
        }

        # Servi√ßo Windows
        $serviceName = if ($instance -eq "MSSQLSERVER") { "MSSQLSERVER" } else { "MSSQL`$$instance" }
        try {
            $service = Get-Service -Name $serviceName -ErrorAction Stop
            Write-Host "‚öôÔ∏è Servi√ßo       : $($service.DisplayName)"
            Write-Host "üîÑ Status        : $($service.Status)"
            Write-Host "üïì Inicializa√ß√£o : $($service.StartType)"
        } catch {
            Write-Host "‚ö†Ô∏è Servi√ßo $serviceName n√£o encontrado ou inacess√≠vel."
        }

        # Edi√ß√£o
        switch ($result.Edition) {
            "Express Edition"    { Write-Host "üÜì Edi√ß√£o gratuita ‚Äî n√£o requer ativa√ß√£o." }
            "Developer Edition"  { Write-Host "üß™ Edi√ß√£o para desenvolvimento ‚Äî sem expira√ß√£o." }
            default              { Write-Host "‚úÖ Edi√ß√£o comercial ‚Äî verifique o contrato de licen√ßa." }
        }

        # Tamanho do diret√≥rio SQL
        if ($regInfo.SQLPath -and (Test-Path $regInfo.SQLPath)) {
            try {
                $size   = (Get-ChildItem -Recurse -Path $regInfo.SQLPath -ErrorAction SilentlyContinue |
                           Measure-Object -Property Length -Sum).Sum
                $sizeGB = [Math]::Round($size / 1GB, 2)
                Write-Host "üíΩ Tamanho Aproximado do Diret√≥rio SQL: $sizeGB GB"
            } catch {
                Write-Host "‚ö†Ô∏è Falha ao calcular o tamanho do diret√≥rio."
            }
        }

        # Decodifica a chave do produto
        try {
            $sqlKeyMap = Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\Instance Names\SQL'
            $keyName   = $sqlKeyMap."$instance"
            if ($keyName) {
                GetSqlServerProductKey -InstanceName $keyName
            } else {
                Write-Host "‚ö†Ô∏è Registro de mapeamento de inst√¢ncia n√£o encontrado para $instance."
            }
        } catch {
            Write-Host "‚ö†Ô∏è Erro ao recuperar nome de registro para $instance."
        }
    }

    Write-Host "`n‚úÖ Varredura conclu√≠da."
}

# Executa a varredura
Get-AllSQLServerInfo
